import numpy as np
import xarray as xr
import pandas as pd
import os
             
def coordinates(path):
    """
    Function to create arrays with the coordinate data.

    Parameters:
    ----------
    path : str
        Path to the folder where the md3d program output files are located.
    
    Returns :
    -------
    coordinate : tuple 
        Coordinates in km (x, y, z).
    shape : tuple
        Total number of grid points along each direction: ``n_x``, ``n_y``, 
    ``n_z``.
    """
    with open(os.path.join(path, 'param_1.5.3.txt'), 'r') as f:
        line = f.readline()
        line = line.split()
        nx, ny, nz = int(line[0]), int(line[1]), int(line[2])
        line = f.readline()
        line = line.split()
        lx, ly, lz = float(line[0]), float(line[1]), float(line[2])
    # Generate the grid in km
    x = np.linspace(0, lx/1000, nx)
    y = np.linspace(-ly/1000, 0, ny)
    z = np.linspace(-lz/1000, 0, nz)
    shape = (nx, ny, nz)
    coordenate = (x, y, z)
    return coordenate, shape


def time_array(path, number, step):
    """
    Read the time file from the md3d program output to generate a time array.

    Parameters:
    ----------
    path : str
        Path to the folder where the md3d program output files are located.
    number : float 
        Number of time files generated by md3d. 
    step : float
        Time step between time file.

    Returns :
    -------
    time : numpy array
        Array of the time
    """
    time = []
    for cont in range(0, number + step, step):
        filename = 'Tempo_' + str(cont) + '.txt'
        ft = open(os.path.join(path, filename), 'r')
        tempo = float(ft.readline().split()[1]) * e-6
        time = np.append(time, tempo)
    return time
    

def read_temperature(path, step):
    """
    Create an array of the temperature for a given time step from the output 
    file of the md3d program.

    Parameters:
    ----------
    path : str
        Path to the folder where the md3d program output files are located.
    parameter_file_name : str 
        Name of the parameter file.
    step : float
        Time step between time file.
    
    Returns :
    -------
    temperature : numpy array
        Array of the temperature for a given time step.
    """
    # Obtain the shape
    coordinate, shape = coordinates(path)
    # Read data
    filename = 'Temper_{}.txt'.format(step)
    a = np.loadtxt(os.path.join(path, filename), unpack=True, 
                   comments='P', skiprows=2)
    tt = a*1.0
    tt[np.abs(tt) < 1.0E-200] = 0
    # Reshape
    temperature = np.reshape(tt, shape, order='F')
    return temperature


def read_velocity(path, step):
    """
    Create a tuple of the velocity along each direction: ``x``, ``y``,``z`` for 
    a given time step from the output file of the md3d program.

    Parameters:
    ----------
    path : str
        Path to the folder where the md3d program output files are located.
    step : float
        Time step between time file.
    
    Returns :
    -------
    velocity : tuple
        Velocity array along each direction: ``x``, ``y``,``z`` for a given 
    time step [m/s^2]. 
    """
    # Obtain the shape
    coordinate, shape = coordinates(path)
    # Read data
    filename = 'Veloc_fut_{}.txt'.format(step) 
    a = np.loadtxt(os.path.join(path, filename), unpack=True,  
                     comments='P', skiprows=2)
    vel = a*1.0
    vel[np.abs(vel) < 1.0E-200] = 0
    v_x, v_y, v_z = vel[0::3], vel[1::3], vel[2::3]
    # Reshape
    v_x = np.reshape(v_x, shape, order='F')
    v_y = np.reshape(v_y, shape, order='F')
    v_z = np.reshape(v_z, shape, order='F')
    velocity = (v_x, v_y, v_z)
    return velocity


def read_density(path, step):
    """
    Create an array of the density for a given time step from the output file 
    of the md3d program.

    Parameters:
    ----------
    path : str
        Path to the folder where the md3d program output files are located.
    step : float
        Time step between time file.
    
    Returns :
    -------
    density : numpy array
        Array of the density for a given time step [kg/m^3].
    """
    # Obtain the shape
    coordinate, shape = coordinates(path)
    # Read data
    filename = 'Rho_{}.txt'.format(step)
    a = np.loadtxt(os.path.join(path, filename), unpack=True,
                   comments='P', skiprows=2)
    dens = a*1.0
    dens[np.abs(dens) < 1.0E-200] = 0
    # Reshape
    density = np.reshape(dens, shape, order='F')
    return density


def read_radiogenic_heat(path, step):
    """
    Create an array of the radiogenic heat production for a given time step 
    from the output file of the md3d program.

    Parameters:
    ----------
    path : str
        Path to the folder where the md3d program output files are located.
    step : float
        Time step between time file.
    
    Returns :
    -------
    radiogenic_heat : numpy array
        Array of the radiogenic heat production for a given time step [W/m^3].
    """
    # Obtain the shape
    coordinate, shape = coordinates(path)
    # Read data
    filename = 'H_{}.txt'.format(step)
    a = np.loadtxt(os.path.join(path, filename), unpack=True, 
                   comments='P', skiprows=2)
    r_heat = a*1.0
    r_heat[np.abs(r_heat) < 1.0E-200] = 0
    # Reshape
    radiogenic_heat = np.reshape(r_heat, shape, order='F')
    return radiogenic_heat


def read_viscosity_factor(path, step):
    """
    Create an array of the viscosity factor for a given time step from the 
    output file of the md3d program.

    Parameters:
    ----------
    path : str
        Path to the folder where the md3d program output files are located.
    step : float
        Time step between time file.
    
    Returns :
    -------
    viscosity_factor : numpy array
        Array of the radiogenic heat production for a given time step [W/m^3].
    """
    # Obtain the shape
    coordinate, shape = coordinates(path)
    # Read data    
    filename = 'Geoq_{}.txt'.format(step)
    a = np.loadtxt(os.path.join(path, filename), unpack=True, 
                   comments='P', skiprows=2)
    vis = a*1.0
    vis[np.abs(vis) < 1.0E-200] = 0
    # Reshape
    viscosity_factor = np.reshape(vis, shape, order='F')
    return viscosity_factor


def read_strain(path, step):
    """
    Create an array of the strain for a given time step from the output file
    of the md3d program.

    Parameters:
    ----------
    path : str
        Path to the folder where the md3d program output files are located.
    step : float
        Time step between time file.
    
    Returns :
    -------
    strain : numpy array
        Array of the strain for a given time step [W/m^3].
    """
    # Obtain the shape
    coordinate, shape = coordinates(path)
    # Read data  
    filename = 'strain_{}.txt'.format(step)
    a = np.loadtxt(os.path.join(path, filename), unpack=True,
                   comments='P', skiprows=2)
    st = a*1.0
    st[np.abs(st) < 1.0E-200] = 0
    # Reshape
    strain = np.reshape(st, shape, order='F')
    return strain


def dataset(path, step):
    """
    Generates a dataset of the output files from the md3d program for a given 
    time step.
    
    Parameters: 
    -----------
    path : str
        Path to the folder where the md3d program output files are located.
    step : float
        Time step.
        
    Returns: 
    -------
    dataset :  :class:`xarray.Dataset`
    Array containing data for a given time step.
    Data: 
        * Temperature
        * Velocity in x axis [m/s]
        * Velocity in z axis [m/s]
        * Velocity intensity [m/s]
        * Density [kg/m^3]
        * Radiogenic heat [W/m^3]
        * Viscosity factor
        * Stain
    """
    # Read the coordinate
    coordinate, size = coordinates(path)
    # Read the data
    temperature = read_temperature(path, step)
    velocity = read_velocity(path, step)
    density = read_density(path, step)
    radiogenic_heat = read_radiogenic_heat(path, step)
    viscosity_factor = read_viscosity_factor(path, step)
    strain = read_strain(path, step)
    # Create the dataset
    coords = {'z': coordinate[2], 'y': coordinate[1], 'x': coordinate[0]}
    data_vars = {'temperature': (['z', 'y', 'x'], temperature.T),
                 'velocity_x': (['z', 'y', 'x'], velocity[0].T),
                 'velocity_y': (['z', 'y', 'x'], velocity[1].T),
                 'velocity_z': (['z', 'y', 'x'], velocity[2].T),
                 'density': (['z', 'y', 'x'], density.T), 
                 'radiogenic_heat': (['z', 'y', 'x'], radiogenic_heat.T),
                 'viscosity_factor': (['z', 'y', 'x'], viscosity_factor.T),
                 'strain': (['z', 'y', 'x'], strain.T)}
    dataset = xr.Dataset(data_vars, coords=coords)
    return dataset


def lagrangian_point(path, step, rank=4):
    """
    Generates a dataset of the lagrangian particle position generated by the  
    md3d program for a given time step.
    
    Parameters: 
    -----------
    path : str
        Path to the folder where the md3d program output files are located.
    step : float 
        Time step.
    rank : float
        Number of processors used in the simulation.
    Returns: 
    -------
    dataset :  :class:`xarray.Dataset`
    Array containing the position (x,y,z) of the particle for a given time 
    step in km.
    """
    x, y, z, cc, cc0 =[], [], [], [], []
    # Read data
    for rank in range(rank):
        filename ='step_{}-rank{}.txt'.format(step,rank)
        x1, y1, z1, c0, c1, c2, c3, c4 = np.loadtxt(os.path.join(path,
                                                                 filename), 
                                                    unpack=True)
        cc0 = np.append(cc0,c0)
        cc = np.append(cc,c1)
        x = np.append(x,x1)
        y = np.append(y,y1)
        z = np.append(z,z1)
    # Filter the number of poins
    xx = x[cc0%10==0]/1000  
    yy = y[cc0%10==0]/1000    
    zz = z[cc0%10==0]/1000     
    # Create a flag por the particles
    point = np.linspace(0, zz.shape[0]-1,zz.shape[0])
    # Create the dataset    
    data = {'x_position': (['point'],  xx), 
            'y_position': (['point'], yy),
            'z_position': (['point'], zz)}
    coords={'point': (['point'], point)}
    ds = xr.Dataset(data, coords=coords)
    return ds
   
