import numpy as np
import xarray as xr
import pandas as pd
import os
             
def coordinates(path, parameter_file):
    """
    Function to create arrays with the coordinate data.
    
    Parameters:
    ----------
    path : str
        Path to the parameter file.
    parameter_file_name : str 
        Name of the parameter file. 
   
    Returns :
    -------
    coordinate : tuple 
        Coordinates in km (x, y, z) where z is the depth positive to down.
    shape : tuple
        Total number of grid points along each direction: ``n_x``, ``n_y``, 
``n_z``.
    """
    with open(os.path.join(path, parameter_file), 'r') as f:
        line = f.readline()
        line = line.split()
        nx, ny, nz = int(line[0]), int(line[1]), int(line[2])
        line = f.readline()
        line = line.split()
        lx, ly, lz = float(line[0]), float(line[1]), float(line[2])
    # Generate the grid in km
    x = np.linspace(0, lx/1000, nx);
    y = np.linspace(-ly/1000, 0, ny);
    z = np.linspace(-lz/1000, 0, nz);
    shape = (nx, ny, nz)
    coordenate = (x, y, z)
    return coordenate, shape


def time_array(path, number, step):
    """
    Read the time file from the md3d program output to generate a time array.
    
    Parameters:
    ----------
    path : str
        Path to the parameter file.
    number : float 
        Number of time files generated by md3d. 
    step : float
        Time step between time file.
        
    Returns :
    -------
    time : numpy array
        Array of the time
    """
    time = []
    for cont in range(0, number + step, step):
        filename = 'Tempo_' + str(cont) + '.txt'
        ft = open(os.path.join(path, filename), 'r')
        tempo = float(ft.readline().split()[1])/1000000.0
        time = np.append(time, tempo)
    return time
    
   
def dataset_2d(path, parameter_file, step):
    """
    Generates a dataset of the output files from the md3d program for a given 
    time step.
    
    Parameters: 
    -----------
    path : str
        Path to the parameter file.
    parameter_file_name : str 
        Name of the parameter file. 
    step : 
        Time step.
        
    Returns: 
    -------
    dataset :  :class:`xarray.Dataset`
    Array containing data for a given time step.
    Data: 
        * Temperature
        * Velocity in x axis [m/s]
        * Velocity in z axis [m/s]
        * Velocity intensity [m/s]
        * Density [kg/m^3]
        * Radiogenic heat [W/m^3]
        * Viscosity factor
        * Stain
    """
    coordinate, size = coordinates(path, parameter_file)
    coords = {'z': coordinate[2], 'x': coordinate[0]}

    temperatura = read_temperature()
    
    # Create the dataset
    data_vars = {'temperature': (['z', 'x'], temperature),
                 'velocity_x': (['z', 'x'], velocity_x),
                 'velocity_z': (['z', 'x'], velocity_z),
                 'velocity':(['z', 'x'], velocity),
                 'density': (["z", "x"], density), 
                 'radiogenic_heat': (['z', 'x'], radiogenic),
                 'viscosity_factor': (['z', 'x'], viscosity_factor),
                 'stain': (['z', 'x'], strain)}
   
    dataset = xr.Dataset(data_vars, coords=coords)
    
    return dataset


def lagrangian_point(path, step, rank=4):
    """
    Generates a dataset of the lagrangian particle position generated by the  
    md3d program for a given time step.
    
    Parameters: 
    -----------
    path : str
        Path to the parameter file.
        
    step : 
        Time step.
    
    rank : 
        Number of processors used in the simulation.
    
    Returns: 
    -------
        dataset : xr.Dataset
            Dataset for a given time step. It contains the position (x,y,z) of 
            each particle in km. 
    """ 
   
    x, y, z, cc, cc0 =[], [], [], [], []
    for rank in range(rank):
        filename ='step_{}-rank{}.txt'.format(step,rank)
        x1, y1, z1, c0, c1, c2, c3, c4 = np.loadtxt(os.path.join(path,
                                                                 filename), 
                                                    unpack=True)
        cc0 = np.append(cc0,c0)
        cc = np.append(cc,c1)
        x = np.append(x,x1)
        y = np.append(y,y1)
        z = np.append(z,z1)
    
    xx = x[cc0%10==0]/1000  
    yy = y[cc0%10==0]/1000    
    zz = z[cc0%10==0]/1000     
    
    point = np.linspace(0, zz.shape[0]-1,zz.shape[0])
    print(zz.shape, point.shape)
        
    # Create the dataset    
    data = {'x_position': (['point'],  xx), 'y_position': (['point'], yy),
            'z_position': (['point'], zz)}
    coords={'point': (['point'], point)}
    ds = xr.Dataset(data, coords=coords)
    
    return ds
   
